[package]
name = "rtorch_lib" # Internal Rust crate name
version = "0.1.0"
edition = "2025"
authors = ["Brandon Yee <brandonyee.nyc@gmail.com>"]
description = "A simplified PyTorch-like library in Rust with Python bindings"
license = "MIT"
readme = "README.md"
repository = "https://github.com/brandonyee-cs/rtorch" # Optional: Link to your repo

# Needed for Python bindings
[lib]
name = "rtorch_lib" # Name for the dynamic library used by Python
crate-type = ["cdylib"]

[dependencies]
# Core numerics library - essential for tensor operations
ndarray = "0.15"
# Optional: For efficient random number generation (initialization, dropout)
rand = "0.8"
# Optional: For multi-threading / parallelism
rayon = "1.8"
# Optional: For serialization (saving/loading models)
serde = { version = "1.0", features = ["derive"] }
# Optional: A common format for serialization
bincode = "1.3"
# Python bindings generator
pyo3 = { version = "0.21", features = ["extension-module", "ndarray"] }
# Optional: Better error handling
thiserror = "1.0"

[dev-dependencies]
# For Rust tests
criterion = "0.5" # For benchmarks (if using benches/)

# Optional: Profile for release builds (optimizations)
[profile.release]
lto = true          # Link-Time Optimization
codegen-units = 1   # Maximize optimization potential
panic = 'abort'     # Smaller binary size, potentially faster
strip = true        # Strip symbols from binary